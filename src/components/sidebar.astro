---
import { type CollectionEntry, getCollection } from 'astro:content';
import SidebarSearchBar from '../components/SidebarSearchBar.tsx';
import SidebarSelectButton from '../components/SidebarSelectButton.tsx';

const docsEntries = await getCollection('docs');
const currentUrl = Astro.url.pathname;
---

<script>
const pathupdate = ({detail: {visit}}: {detail: any}) => {
    document.querySelectorAll("a[href].SidebarSelectButton").forEach((button) => {
      if (`${button.getAttribute('href')}` === visit.to.url) {
        button.classList.add('selected')
      } else {
        button.classList.remove('selected')
      }
    })

    const sidebar = document.querySelector("div.sidebar_container")
    if (`/` !== visit.to.url) {
      sidebar?.classList.remove('necessary')
    } else {
      sidebar?.classList.add('necessary')
    }
  }
  
  // @ts-ignore
  document.addEventListener('swup:page:view', pathupdate)
</script>

<div class={currentUrl === "/" ? `sidebar_container necessary`: `sidebar_container`}>
  <SidebarSearchBar client:visible />
  <div class="items">
    {docsEntries.map((entry: CollectionEntry<'docs'>) => (
      <SidebarSelectButton
        iconifyIcon={entry.data.icon}
        settingName={entry.data.title}
        settingDesc={entry.data.desc}
        href={`/${entry.slug}/`}
        className={`/${entry.slug}/` === currentUrl ? 'selected': ''}
        client:visible
      />)
    )}
  </div>
</div>

<style>
.sidebar_container {
  overflow-y: auto;
  background: #14100c;
  padding: 25px;
  height: 100%;
  max-width: 600px;
  width: 50%;
  position: relative;
  box-sizing: border-box;
}
.items {
  display: flex;
  flex-direction: column;
  gap: 10px;
}
@media screen and (max-width: 1140px) {
  .sidebar_container:not(.necessary) {
    display: none;
  }
  .sidebar_container {
    width: 100%;
    max-width: unset;
  }
}
</style>
